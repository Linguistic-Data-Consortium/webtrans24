// Generated by CoffeeScript 2.6.1

import { event } from '../guides/guide'

import { update_segments } from './segments_helper'
import { active_channel } from './stores'
import { stop_playing } from './play';
import { SpeechRecognition } from './speechtotext.js';

const Waveform = class Waveform {
  // create is like a constructor, creating a waveform object with default
  // values for attributes and functions/methods.  It does very little besides
  // returning an object.  Calling init on that object is also like a constructor
  // doing more significant setup work.  Using a ruby analogy, create is like 
  // new and init is like initialize, but init has to be called explicitly.
  constructor(_interface) {
    this.interface = _interface;
    // $('body').prepend helpx
    this.debug = false; // turns on extra console.log statments
    this.external = false;
    this.node = this.interface;
    this.name = this.node.meta.id;
    this.selector = `#node-${this.node.meta.id}`;
    this.wave_display_length = null; // seconds, for waveform display
    this.wave_display_offset = null; // seconds, for waveform display
    this.wave_display_length_in_samples = null;
    this.wave_display_offset_in_samples = null;
    this.samples_per_pixel = null;
    this.play_head = 0;
    this.playheads = new Map();
    this.wave_offset_pixels = false;
    this.big_step = 50;
    this.little_step = 10;
    this.step1 = 0;
    this.step2 = 0;
    this.step3 = 0;
    this.step4 = 0;
    // wave_end_pixels   = false
    // this.wave_scale = null; // wave_canvas_length / wave_canvas_width (seconds per pixel)
    // @active_channel = 0
    this.transcript_line_selector = null;
    this.wave_active_transcript_line = false;
    this.stereo = null;
    // @channels = []
    this.cache = {};
    this.cache2 = {};
    this.update_cursor = false;
    this.update_handles = false;
    this.update_play_head = false;
    this.split_line_margin = 0.1;
    this.keyboards = {};
    this.special = false;
    this.sources = window.sources_object; //new Sources 'waveform', this
    this.speechrecognition = false;
    this.wave_audio = {};
    this.mode = 'cursor';
  }

  convert_seconds_to_samples(seconds) {
    return Math.floor(seconds * this.wave_buffer_sample_rate);
  }

  convert_samples_to_seconds(samples) {
    return samples / this.wave_buffer_sample_rate;
  }

  init() {
    var aa, bb, h, l, that, vars, w, wh;
    w = this;
    that = this;
    l = 10; // length in seconds
    wh = 125; // height in pixels
    // w.services = ldc_nodes.getp_simple('https://webann.ldc.upenn.edu').then (data) ->
    w.services = window.services_init();
    // w.help_screens();
    // ldc_nodes.wait_for_root_key "add_from_waveform_list", ->
    // root = $('.Root').data()
    vars = window.ldc.vars;
    w.transcript_line_selector = `.${vars.add_from_waveform_list}Item`;
    w.transcript_line_selector = ".segment";
    // that.wave_buffer = w.node.buffer
    // wave_buffers[nid] = b
    // stereo = true if b.numberOfChannels > 1

    // if $('.Waveform').length is 2
    //     w.stereoa = $(w.selector).hasClass 'ChannelA'
    //     w.stereob = $(w.selector).hasClass 'ChannelB'
    // h = {
    //   name: 'delete_all_confirm_modal',
    //   delegate: that,
    //   b: 'DELETE',
    //   f: "delete_all",
    //   h: 'Delete ALL segments?'
    // };
    // that.delete_all_confirm_modal = new Modal(h);
    // that.delete_all_confirm_modal.init();
    // h = {
    //   name: 'delete_last_section_confirm_modal',
    //   delegate: that,
    //   b: 'DELETE',
    //   f: "delete_last_section",
    //   h: 'Delete last section?'
    // };
    // that.delete_last_section_confirm_modal = new Modal(h);
    // that.delete_last_section_confirm_modal.init();
    // h = {
    //   name: 'settings_modal',
    //   delegate: that,
    //   b: 'close',
    //   f: "close_modallll",
    //   h: 'Settings'
    // };
    // that.settings_modal = new Modal(h);
    // return that.settings_modal.init();
  }

  // w.add_timit()
  // console.log 'aaa'

  // set_speaker() {
  //   return $('.crnt .Speaker').data().obj.set_speaker();
  // }


  help_screen_message(m) {
    $('#help_screen_message').text(m);
    return setTimeout(function() {
      return $('#help_screen_message').text('');
    }, 5000);
  }

  // set_time_heights: (ticks, cursor) ->
  //     this.set_time_heights_helper ticks, cursor
  //     this.set_time_heights_helper ticks, cursor, waveform2 if stereo is true

  set_times_then_draw(x, y) {
    // set_times(this, x, y);
    // mouse.update( (x) => x );
    this.component.set_times_then_draw(x, y);
  }

  // w.draw_play_head selector, 0
  // w.draw_play_head selector.replace('0 ', '1 '), 1 if w.stereo
  // x = w.convert_seconds_to_pixels(w.play_head - w.wave_display_offset)
  // display = w.channels[0]
  // w.draw_waveform_line selector, x, 'play_head', 'green', true, display.time_height_cursor
  // display = w.channels[1]
  // w.draw_waveform_line selector, x, 'play_head', 'green', false, display.time_height_cursor

    // called continuously, see top of file
  // waveform_callback(current_audio_node, playing) {
  //   var w;
  //   w = this;
  //   if (current_audio_node) {
  //     // return if w.drawing is true
  //     // w.drawing = true
  //     // console.log 'draw wave'
  //     // w.wave_scale = w.wave_display_length / w.wave_canvas_width
  //     w.play_callback(current_audio_node, playing);
  //   }
  //   // handles everything but the waveform itself
  //   // for x in w.channels
  //   //     x.update()
  //   // return unless w.component
  //   // w.component.update();
  //   w.update_cursor = false;
  //   w.update_scrollbar = false;
  //   w.update_underlines = false;
  //   w.update_play_head = false;
  //   w.update_ticks = false;
  //   w.update_tick_times = false;
  // }

  // w.drawing = false
  activate_docid(docid) {
    this.activate(docid);
  }

  activate(docid) {
      if(docid && docid != this.wave_docid){
      // active_docid.update( () => docid );
      active_channel.update( () => docid == this.docid ? 0 : 1 );
      // activate3();
    }
  }

  keyboard_focus(e) {
    e.preventDefault();
    return $('.keyboard').focus();
  }

  open_spectrogram() {
    var w;
    w = this;
    w.spectrogram_flag = !w.spectrogram_flag;
    if (w.spectrogram_flag) {
      $('.spectrogram-canvas').show();
      return w.draw_spectrogram();
    } else {
      return $('.spectrogram-canvas').hide();
    }
  }

  sort_then_split() {
    var w;
    w = this;
    w.sort_transcript_lines(true);
    return w.split_line($('.active-transcript-line').data().meta.id, ldc_annotate, wave, '.List', 'new.Snippet');
  }

  // alert 'splitting!'
  refresh_waveform() {
    // that.sort_transcript_lines(false)
    return $('.Waveform').each(function(i, x) {
      return $(x).data().waveform.update_waveform = true;
    });
  }

  sort_transcript_lines_forward() {
    return this.sort_transcript_lines(true);
  }

  delete_all_sections() {
    $('.SectionListItem').each(function(i, x) {
      return ldc_annotate.add_message($(x).data().meta.id, 'delete', null);
    });
    ldc_annotate.submit_form();
    ldc_annotate.add_callback( () => update_segments() );
  }

  delete_last_section() {
    var last;
    last = null;
    $('.SectionListItem').each(function(i, x) {
      var id;
      id = $(x).data().meta.id;
      if (Number(id) > Number(last)) {
        return last = id;
      }
    });
    if (last) {
      ldc_annotate.add_message(last, 'delete', null);
      ldc_annotate.submit_form();
      ldc_annotate.add_callback( () => update_segments() );
    }
  }

  delete_last_section_confirm() {
    return this.delete_last_section_confirm_modal.open_modal();
  }

  delete_current_section() {
    var id, last, that;
    that = this;
    last = null;
    id = window.ldc.crnt;
    if (id) {
      $('.SectionListItem').each(function(i, x) {
        var iid;
        iid = $(x).data().meta.id;
        if ($(x).find('.BegSeg').data().value.value === id || $(x).find('.EndSeg').data().value.value === id) {
          return last = iid;
        }
      });
      if (last) {
        return that.delete_section(last);
      }
    }
  }

  find_current_section() {
    var id, last;
    last = null;
    id = window.ldc.crnt;
    if (id) {
      $('.SectionListItem').each(function(i, x) {
        var iid;
        iid = $(x).data().meta.id;
        if ($(x).find('.BegSeg').data().value.value === id || $(x).find('.EndSeg').data().value.value === id) {
          return last = iid;
        }
      });
    }
    return last;
  }

  delete_section_from_modal() {
    var id, that;
    that = this;
    alert('here');
    return;
    id = that.delete_section_confirm_modal.section_id;
    return that.delete_section(id);
  }

  delete_section_confirm() {
    var id, section, that;
    that = this;
    id = that.find_current_section();
    if (id) {
      section = $(`#node-${id}`).find(".Section").data().value.value;
      $('#delete_section_confirm_modal h3').text(`Delete section ${section}?`);
      that.delete_section_confirm_modal.section_id = id;
      return that.delete_section_confirm_modal.open_modal();
    }
  }

  delete_all_sections_confirm() {
    var that;
    that = this;
    $('#delete_section_confirm_modal h3').text("Delete all sections?");
    that.delete_section_confirm_modal.section_id = 'all';
    return that.delete_section_confirm_modal.open_modal();
  }

  show_sections() {
    var w;
    w = this;
    return w.interface.segments.open_sections();
  }

  create_test_segment() {
    var audio_path, list_selector, span;
    list_selector = '.SegmentList';
    audio_path = 'new.Segment';
    span = {
      offset: 1.0,
      length: 1.0
    };
    this.add_audio_to_list(list_selector, audio_path, span);
    ldc_annotate.submit_form();
    ldc_annotate.add_callback( () => update_segments() );
  }

  move_cursor_left_big(e) {
    return this.move_cursor_helper(e, this.big_step, -1);
  }

  move_cursor_right_big(e) {
    return this.move_cursor_helper(e, this.big_step, 1);
  }

  move_cursor_left_little(e) {
    return this.move_cursor_helper(e, this.little_step, -1);
  }

  move_cursor_right_little(e) {
    return this.move_cursor_helper(e, this.little_step, 1);
  }

  set_mode_to_begx() {
    var w;
    w = this;
    w.mousedown_x = w.cursor_x();
    return w.set_mode('selection');
  }

  undo() {
    return this.component.undo();
  }

  stop_playing() {
    stop_playing();
  }

  set_wave_events2() {
    var that, w;
    w = this;
    that = w;
    $('body').on("direct-upload:end", function(e, data, status, xhr) {
      console.log(e);
      return $('.new_file_set').after(`<div class=uploaded>uploaded ${e.detail.file.name}</div>`);
    });
    $('body').on("direct-uploads:end", function(e, data, status, xhr) {
      console.log(e);
      $('.new_file_set').hide();
      return $('.new_file_set').after('<button class=file_upload_dismiss>Dismiss</button>');
    });
    $('body').on('click', '.file_upload_dismiss', function() {
      $('.new_source, .file_upload_dismiss, .uploaded').remove();
      return $('.Root').show();
    });
    return $('body').on("ajax:success", function(e, data, status, xhr) {
      console.log('TWO');
      console.log(e);
      if (e.detail[0].type === 'file_set') {
        return getp(`/file_sets/${e.detail[0].id}`, function(data) {
          console.log('DATA');
          console.log(data);
          return $.each(data, function(i, x) {
            return w.add_timestamps(x);
          });
        });
      }
    });
  }

  set_wave_events3() {
    var f, scrollf, that, underline_callback, w;
    w = this;
    that = w;
    // $('.Root').on 'click', '.Segment', (e) ->
    //     return if wwaveform.display.disable_waveform is true
    //     node = $(this).parents('.Timestamps')[0]
    //     play_head = $(node).data().value.end
    //     that.show_node node, false
    //$('.Root').append ldc_nodes.waveform_controls(1)
    $('#button-add').on('click', function(e) {});
    $('#button-play').on('click', function(e) {
      return that.play_current_span();
    });
    $('#button-filter').on('click', function(e) {
      return that.filter();
    });
    $('#filter_modal_save').on('click', function() {
      return that.filter();
    });
  }

  // $('body').on 'mouseup', (e) ->
  //     w.wave_adjust_scroll =false
  mouse_swipe() {
    var w;
    w = this;
    w.set_mode_to_cursor();
    x = w.cursor_x();
    w.mousedown_x = x;
    w.set_mousedown_true();
    w.mouseup_x = x + 100;
    return w.set_mousedown_false();
  }


  get_alignment() {
    var f2, f22, fn, text, w;
    w = this;
    text = '';
    $('.Transcription').each(function(i, x) {
      return text += $(x).data().value.value;
    });
    // text += ' blah'
    $('.ChannelA').after('<div class="waiting">Waiting</div>');
    f2 = function(data) {
      console.log('AINGDONE2');
      return console.log(data);
    };
    f22 = function(url) {
      if (this.external) {
        url = url.replace(':4567', '');
      }
      return $('body').prepend(`<a href=${url}>TextGrid</a>`);
    };
    x = '1A9AMW16Zk7GaSoCg6VgXg1k';
    fn = `s3://image-description/${x}`;
    return window.align({
      text: text,
      audio: fn,
      f22: f2
    });
  }

  add_timit() {
    var w;
    w = this;
    return getphtml('/file_set/get_uploads').then(function(data) {
      console.log(data);
      $('.Root').after(data);
      return $('.Root').hide();
    }).then(function() {
      var a;
      a = [[1, 2], [3, 4]];
      // w.add_timestamps a
      return get('/browser/index', function(data) {
        return console.log(data);
      });
    });
  }

  play_from_cursor() {
    return this.component.play_from_cursor();
  }

  play_from_selection_beg() {
    return this.component.play_from_selection_beg();
  }

  play_from_selection_end() {
    return this.component.play_from_selection_end();
  }

  check_channel(x) {
    var event_channel;
    event_channel = parseInt($(x).parent().attr('id').split('-')[3]);
    return this.active_channel === event_channel;
  }

  switch_channel(x) {
    var event_channel, w;
    w = this;
    w.activate();
    return;
    event_channel = parseInt($(x).parent().attr('id').split('-')[3]);
    if (w.active_channel === 0 && event_channel === 1) {
      $('.channelb-button').click();
    }
    if (w.active_channel === 1 && event_channel === 0) {
      return $('.channela-button').click();
    }
  }

  show_src(src, beg) {
    this.component.show_src(src, beg);
  }


  add_to() {
    var input, orig, pos, y, z;
    input = $('input:focus');
    orig = input.val();
    pos = input[0].selectionStart;
    x = orig.substring(0, pos);
    y = '{blurb}';
    z = orig.substring(pos, orig.length);
    input.val(`${x}${y}${z}`);
    input[0].selectionStart = pos + y.length;
    return input[0].selectionEnd = pos + y.length;
  }

  // input.trigger 'change'
  // setTimeout ->
  //     $(input).focus()
  // , 1000
  get_sad_a() {
    return [[0.00, 0.54], [2.26, 10.94], [27.86, 28.38], [29.82, 30.35], [34.32, 39.54], [50.58, 51.11], [57.45, 65.45], [70.11, 70.62], [73.81, 75.29], [76.90, 79.59], [81.75, 91.73], [92.17, 104.67], [105.02, 110.18], [110.95, 111.50], [112.94, 119.93], [120.26, 126.05], [126.42, 130.84], [131.20, 137.43], [139.66, 140.17], [141.47, 152.97], [153.42, 161.17], [162.77, 164.69], [165.24, 176.41], [180.47, 181.08], [187.72, 188.98], [193.16, 195.18], [195.53, 203.83], [206.20, 213.36], [213.85, 215.38], [216.52, 217.15], [220.16, 222.26], [228.66, 229.35], [230.00, 230.85], [232.53, 233.08], [235.09, 238.14], [238.58, 243.73], [244.28, 250.60], [251.44, 252.30]];
  }

  special_settings() {
    var w;
    w = this;
    this.settings_modal.open_modal();
    $('#settings_modal .modal-body').html(settings);
    console.log(this.keyboards.help_screen_main.reset());
    $('#checkk').prop('checked', w.special === true);
    return $('.settings_pane').on('change', '#checkk', function(e) {
      return w.special = $(this).prop('checked');
    });
  }

  settings2() {
    return console.log('done');
  }

  open_guidelines() {
    var url;
    url = 'https://docs.google.com/document/d/e/2PACX-1vSTU3051TwfSjLorIpae_Yy5G6veJwuo1AXPW7fvVWlD-CIZ95KpQL2zyfV3FoRNBtf6JZARobEtGCz/pub';
    window.open(url, "webann_document_window", "toolbar=no,menubar=no,status=no,width=1000,height=500");
    return this.keyboards.help_screen_main.reset();
  }

  // that = this
  // $('.Root').hide()
  // parser = new IbmTranscript that
  // h =
  //     w: that
  //     parser: parser
  // that.browse_a = new BrowseB
  //     target: $('.ann_pane')[0]
  //     props: h
  activate_sr() {
    var mainDiv;
    console.log("activate_sr");
    this.speechrecognition = true;
    mainDiv = $("<div class='speechrecognition'>Automatic Speech Recognition: ON</div>");
    $('.ChannelA').before(mainDiv);
    return SpeechRecognition.activate().then(function() {
      return setTimeout(function() {
        return mainDiv.remove();
      }, 1500);
    });
  }

  deactivate_sr() {
    console.log("deactivate_sr");
    this.speechrecognition = false;
    return SpeechRecognition.deactivate().then(function() {
      var mainDiv;
      mainDiv = $("<div class='speechrecognition'>Automatic Speech Recognition: OFF</div>");
      $('.ChannelA').before(mainDiv);
      return setTimeout(function() {
        return mainDiv.remove();
      }, 1500);
    });
  }

  switch_sr() {
    this.keyboards.services.reset();
    console.log("switch_sr");
    if (this.speechrecognition) {
      return this.deactivate_sr();
    } else {
      return this.activate_sr();
    }
  }

  info() {
    return console.log(this.datainfo);
  }

};

export {
  Waveform
};

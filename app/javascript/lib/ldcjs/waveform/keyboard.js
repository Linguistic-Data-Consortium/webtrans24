// Generated by CoffeeScript 2.6.1
var Keyboard;

Keyboard = class Keyboard {
  constructor(name) {
    this.name = name;
    this.delegate = this;
  }

  set_map(map1) {
    this.map = map1;
  }

  set_delegate(delegate1) {
    this.delegate = delegate1;
  }

  shortcuts() {
    var i, j, results;
    results = [];
    for (i = j = 97; j <= 122; i = ++j) {
      results.push(String.fromCharCode(i));
    }
    return results;
  }

  handle(e, mini) {
    var f;
    // f = w["keys_#{ss}"][e.key]
    f = this.map[e.key];
    if (f && f.match(/^nodes:/)) {
      return () => ldc_nodes[f.split(':')[1]]();
    } else if (f && f.match(/^work:/)) {
      return () => ldc_work[f.split(':')[1]]();
    } else if (f) {
      if (f === 'close') {
        this.reset();
        return f;
      } else {
        console.log(this.name);
        return () => this.delegate[f]();
      }
    } else {
      if (mini) {
        if (this.unknown_key_callback) {
          return () => this.unknown_key_callback();
        }
      } else {
        return () => this.help_screen_unknown();
      }
    }
  }

  help_screen_unknown() {
    this.reset();
    if (this.unknown_key_callback) {
      return this.unknown_key_callback();
    }
  }

  set_speaker_helper_new_helper(label, speakers) {
    speakers.push(['n', label]);
    this.map.n = 'getf';
    // this.delegate[this.map.n] = h.getf;
    this.delegate[this.map.n] = () => 'getf';
  }

  set_speaker_helper_replace_helper(label, speakers) {
    const k = 'r';
    speakers.push([k, label]);
    const v = 'replacef';
    this.map[k] = v;
    this.delegate[v] = () => v;
  }

};

export { Keyboard }
